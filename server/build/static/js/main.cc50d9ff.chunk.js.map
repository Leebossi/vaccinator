{"version":3,"sources":["util/helpers.js","services/vaccinations.js","services/vaccine.js","components/VaccineTable.js","components/VaccinationTable.js","components/VaccineStatistics.js","components/BarChart.js","components/Display.js","App.js","index.js"],"names":["formatDate","date","toISOString","split","filterByDate","data","result","length","Object","keys","filter","d","arrived","includes","vaccinationDate","getTotalVaccinesToDate","vaccine","dateToCompare","Date","setUTCHours","v","getInjections","injections","i","exportedObject","getAll","a","axios","get","response","baseUrl","getAntiqua","getSolarBuddhica","getZerpfy","VaccineTable","useState","setFilter","filteredData","rows","columns","row","some","column","toString","toLowerCase","indexOf","search","className","type","value","onChange","e","target","placeholder","map","id","orderNumber","responsiblePerson","healthCareDistrict","toLocaleString","VaccinationTable","vaccinations","vaccination","sourceBottle","gender","VaccineStatistics","brand","BarChart","chartData","antiqua","solarBuddhica","zerpfy","labels","datasets","label","orders","backgroundColor","options","scales","yAxes","ticks","beginAtZero","Display","totalVaccines","vaccinationsByBottle","vaccines","sourceBottles","push","found","find","getVaccinationsByBottle","concat","totalVaccinationsToDate","getTotalVaccinationsToDate","totalSolarBuddhicaToDate","totalAntiquaToDate","totalZerpfyToDate","App","setVaccinations","setAntiqua","setSolarBuddhica","setZerpfy","selectedDate","setSelectedDate","useEffect","vaccinationService","then","initialVaccinations","vaccineService","console","log","to","selected","dateFormat","toDateString","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cc50d9ff.chunk.js","sourcesContent":["export const isExpired = (dateX, dateY, shelfLife) => {\n  const ms = (Date.parse(dateX) - Date.parse(dateY))\n  const days = ms / 86400000\n\n  return (Math.abs(days) > shelfLife ? true : false)\n}\n\n\n// returns date in format yyyy-mm-dd\nexport const formatDate = (date) => {\n  if (!date) {\n    return null\n  }\n  return date.toISOString().split(/[T ]/i)[0]\n}\n\nexport const filterByDate = (data, date) => {\n  let result\n  if (data.length > 0) {\n    if (Object.keys(data[0])[0] === 'id') {\n      result = data.filter(d => d.arrived.includes(formatDate(date)))\n    } else if (Object.keys(data[0])[0] === 'vaccination-id') {\n      result = data.filter(d => d.vaccinationDate.includes(formatDate(date)))\n    }\n  }\n\n  return result\n}\n\nexport const getVaccinationsByBottle = (vaccinations, vaccines) => {\n  let vaccinationsByBottle = {\n    antiqua: 0,\n    solarBuddhica: 0,\n    zerpfy: 0\n  }\n  let sourceBottles = []\n\n  if (vaccinations) {\n    for (let i = 0; i < vaccinations.length; i++) {\n      sourceBottles.push(vaccinations[i]['sourceBottle'])\n    }\n  }\n\n  for (let i = 0; i < sourceBottles.length; i++) {\n    const found = vaccines.find(vaccine => vaccine.id === sourceBottles[i])\n    if (found) {\n      if (found.vaccine === 'Antiqua') {\n        vaccinationsByBottle.antiqua++\n      } else if (found.vaccine === 'SolarBuddhica') {\n        vaccinationsByBottle.solarBuddhica++\n      } else if (found.vaccine === 'Zerpfy') {\n        vaccinationsByBottle.zerpfy++\n      }\n    }\n  }\n\n  return vaccinationsByBottle\n}\n\nexport const getTotalVaccinationsToDate = (vaccinations, date) => {\n  if (!vaccinations || !date) {\n    return null\n  }\n  let dateToCompare = new Date(date)\n  let result\n  dateToCompare.setUTCHours(24, 0, 0, 0)\n  result = vaccinations.filter(v => v.vaccinationDate < dateToCompare.toISOString())\n  return result\n}\n\nexport const getTotalVaccinesToDate = (vaccine, date) => {\n  let dateToCompare = new Date(date)\n  let result\n  dateToCompare.setUTCHours(24, 0, 0, 0)\n  result = vaccine.filter(v => v.arrived < dateToCompare.toISOString())\n  return result\n}\n\nexport const getInjections = (vaccine) => {\n  let injections = 0\n  for (let i = 0; i < vaccine.length; i++) {\n    injections += vaccine[i].injections  \n  }\n  return injections\n}","import axios from 'axios'\nconst baseUrl = 'http://localhost:3001/api/vaccinations'\n\nconst getAll = async () => {\n  const response = await axios.get(baseUrl)\n  return response.data\n}\n\nconst exportedObject = {getAll}\n\nexport default exportedObject","import axios from 'axios'\n\nconst baseUrl = 'http://localhost:3001/api/'\n\nconst getAntiqua = async () => {\n  const response = await axios.get(baseUrl + 'antiqua')\n  return response.data\n}\n\nconst getSolarBuddhica = async () => {\n  const response = await axios.get(baseUrl + 'solarbuddhica')\n  return response.data\n}\n\nconst getZerpfy = async () => {\n  const response = await axios.get(baseUrl + 'zerpfy')\n  return response.data\n}\n\nconst exportedObject = { getAntiqua, getSolarBuddhica, getZerpfy }\n\nexport default exportedObject","import React, { useState } from 'react'\n\nconst VaccineTable = ({ data, vaccine }) => {\n  const [filter, setFilter] = useState(\"\")\n\n  const search = (rows) => {\n    if (!rows) {\n      return null\n    }\n    const columns = rows[0] && Object.keys(rows[0])\n    return rows.filter((row) =>\n      columns.some(\n        (column) => row[column].toString().toLowerCase().indexOf(filter.toLowerCase()) > -1)\n    )\n  }\n\n  let filteredData = search(data)\n\n  if (!filteredData) {\n    filteredData = []\n  }\n\n  if (!filteredData || filteredData.length === 0) {\n    return (\n      <div className=\"table-container\">\n        <h2>{vaccine}</h2>\n        <div>\n          <input type=\"text\" value={filter} onChange={(e) => setFilter(e.target.value)}></input>\n        </div>\n        no data to display\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"table-container\">\n      <h2>{vaccine}</h2>\n      <div>\n        <input type=\"text\" value={filter} onChange={(e) => setFilter(e.target.value)} placeholder=\"search\"></input>\n      </div>\n      <table>\n        <tbody>\n          <tr>\n            <th>id</th>\n            <th>order#</th>\n            <th>contact</th>\n            <th>district</th>\n            <th>arrived</th>\n          </tr>\n          {filteredData.map(d =>\n            <tr key={d.id}>\n              <td>{d.id}</td>\n              <td>{d.orderNumber}</td>\n              <td>{d.responsiblePerson}</td>\n              <td>{d.healthCareDistrict}</td>\n              <td>{new Date(d.arrived).toLocaleString(\"fi-FI\")}</td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\nexport default VaccineTable","import React from 'react'\n\nconst VaccinationTable = ({ vaccinations }) => {\n  if (!vaccinations || vaccinations.length === 0) {\n    return null\n  }\n\n  return (\n    <div className=\"table-container\">\n      <h2>Vaccinations</h2>\n      <table>\n        <tbody>\n          <tr>\n            <th>ID</th>\n            <th>bottle</th>\n            <th>gender</th>\n            <th>date</th>\n          </tr>\n          {vaccinations.map(vaccination =>\n            <tr key={vaccination['vaccination-id']}>\n              <td>{vaccination['vaccination-id']}</td>\n              <td>{vaccination.sourceBottle}</td>\n              <td>{vaccination.gender}</td>\n              <td>{vaccination.vaccinationDate}</td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\nexport default VaccinationTable","import React from 'react'\nimport { getInjections } from '../util/helpers'\n\nconst VaccineStatistics = ({vaccine, brand, vaccinations}) => {\n  if (!vaccine) {\n    return null\n  }\n\n  return (\n    <div className=\"statistics-card\">\n      <h2>{brand}</h2>\n      <p>orders arrived: {vaccine.length}</p>\n      <p>amount of injections in arrived orders: {getInjections(vaccine)}</p>\n      <p>vaccinations given: {vaccinations}</p>\n    </div>\n  )\n}\n\nexport default VaccineStatistics","import React from 'react';\nimport { Bar } from 'react-chartjs-2';\n\nconst BarChart = (chartData) => {\n  if (!chartData.length === 0) {\n    return null\n  }\n\n  let data = {}\n  \n  if (chartData.chartData.antiqua && chartData.chartData.solarBuddhica && chartData.chartData.zerpfy) {\n    const antiqua = chartData.chartData.antiqua\n    const solarBuddhica = chartData.chartData.solarBuddhica\n    const zerpfy = chartData.chartData.zerpfy\n    data = {\n      labels: ['orders arrived', '# of injections in orders', 'vaccinations given'],\n      datasets: [\n        {\n          label: 'Antiqua',\n          data: [antiqua.orders, antiqua.injections, antiqua.vaccinations],\n          backgroundColor: 'rgb(251, 97, 218)',\n        },\n        {\n          label: 'SolarBuddhica',\n          data: [solarBuddhica.orders, solarBuddhica.injections, solarBuddhica.vaccinations],\n          backgroundColor: 'rgb(97, 218, 251)',\n        },\n        {\n          label: 'Zerpfy',\n          data: [zerpfy.orders, zerpfy.injections, zerpfy.vaccinations],\n          backgroundColor: 'rgb(218, 251, 97)',\n        },\n      ],\n    }\n  }\n  \n  const options = {\n    scales: {\n      yAxes: [\n        {\n          ticks: {\n            beginAtZero: true,\n          },\n        },\n      ],\n    },\n  }\n\n  return (\n    <div className=\"chart-container\">\n      <Bar data={data} options={options} />\n    </div>\n  )\n}\n\nexport default BarChart","import React from 'react'\n\nimport VaccineStatistics from './VaccineStatistics'\nimport BarChart from './BarChart'\nimport {\n  getTotalVaccinationsToDate,\n  filterByDate,\n  getVaccinationsByBottle,\n  getTotalVaccinesToDate,\n  getInjections\n} from '../util/helpers'\n\nconst Display = ({ data, date }) => {\n  const solarBuddhica = filterByDate(data.solarBuddhica, date)\n  const antiqua = filterByDate(data.antiqua, date)\n  const zerpfy = filterByDate(data.zerpfy, date)\n  const vaccinations = filterByDate(data.vaccinations, date)\n  const vaccines = data.antiqua.concat(data.zerpfy).concat(data.solarBuddhica)\n  const vaccinationsByBottle = getVaccinationsByBottle(vaccinations, vaccines)\n  const totalVaccinationsToDate = getTotalVaccinationsToDate(data.vaccinations, date)\n  const totalSolarBuddhicaToDate = getTotalVaccinesToDate(data.solarBuddhica, date)\n  const totalAntiquaToDate = getTotalVaccinesToDate(data.antiqua, date)\n  const totalZerpfyToDate = getTotalVaccinesToDate(data.zerpfy, date)\n  let chartData = {}\n  let totalVaccines\n\n  if (!data.vaccinations || data.vaccinations.length === 0) {\n    return null\n  }\n\n  if (antiqua && solarBuddhica && zerpfy) {\n    totalVaccines = antiqua.length + solarBuddhica.length + zerpfy.length\n    chartData = {\n      antiqua: {\n        orders: antiqua.length,\n        injections: getInjections(antiqua),\n        vaccinations: vaccinationsByBottle.antiqua\n      },\n      solarBuddhica: {\n        orders: solarBuddhica.length,\n        injections: getInjections(solarBuddhica),\n        vaccinations: vaccinationsByBottle.solarBuddhica\n      },\n      zerpfy: {\n        orders: zerpfy.length,\n        injections: getInjections(zerpfy),\n        vaccinations: vaccinationsByBottle.zerpfy\n      }\n    }\n  }\n\n  if (!date) {\n    return (\n      <div>\n        no data on given date\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"statistics-container\">\n      <VaccineStatistics vaccine={antiqua} brand={'Antiqua'} vaccinations={vaccinationsByBottle.antiqua} />\n      <VaccineStatistics vaccine={solarBuddhica} brand={'SolarBuddhica'} vaccinations={vaccinationsByBottle.solarBuddhica} />\n      <VaccineStatistics vaccine={zerpfy} brand={'Zerpfy'} vaccinations={vaccinationsByBottle.zerpfy} />\n      <div className=\"statistics-card\">\n        <h2>Total</h2>\n        <p>total orders arrived: {totalVaccines}</p>\n        <p>vaccinations: {vaccinations.length}</p>\n        <hr></hr>\n        <p>total vaccinations to date {totalVaccinationsToDate.length}</p>\n        <p>total Antiqua orders to date: {totalAntiquaToDate.length}</p>\n        <p>total SolarBuddhica orders to date: {totalSolarBuddhicaToDate.length}</p>\n        <p>total Zerpfy orders to date: {totalZerpfyToDate.length}</p>\n        <hr></hr>\n      </div>\n      <BarChart chartData={chartData}/>\n    </div>\n  )\n}\n\nexport default Display","import React, { useEffect, useState } from 'react'\nimport {\n  BrowserRouter as Router,\n  Switch, Route, Link\n} from 'react-router-dom'\nimport DatePicker from 'react-datepicker'\nimport 'react-datepicker/dist/react-datepicker.css'\nimport './index.css'\nimport { filterByDate } from './util/helpers'\n\nimport vaccinationService from './services/vaccinations'\nimport vaccineService from './services/vaccine'\n\nimport VaccineTable from './components/VaccineTable'\nimport VaccinationTable from './components/VaccinationTable'\nimport Display from './components/Display'\n\nconst App = () => {\n  const [vaccinations, setVaccinations] = useState([])\n  const [antiqua, setAntiqua] = useState([])\n  const [solarBuddhica, setSolarBuddhica] = useState([])\n  const [zerpfy, setZerpfy] = useState([])\n  const [selectedDate, setSelectedDate] = useState(new Date('2021-04-12T11:10:06.473587Z'))\n\n  let data = { vaccinations, antiqua, solarBuddhica, zerpfy }\n\n  useEffect(() => {\n    vaccinationService\n      .getAll()\n      .then(initialVaccinations => {\n        setVaccinations(initialVaccinations)\n      })\n\n    vaccineService\n      .getAntiqua()\n      .then(response => {\n        setAntiqua(response)\n      })\n\n    vaccineService\n      .getSolarBuddhica()\n      .then(response => {\n        setSolarBuddhica(response)\n      })\n\n    vaccineService\n      .getZerpfy()\n      .then(response => {\n        setZerpfy(response)\n      })\n  }, [])\n\n  useEffect(() => {\n    console.log('selected date:', selectedDate)\n  }, [selectedDate])\n\n  return (\n    <Router>\n      <div className=\"navbar\">\n        <Link className=\"nav-item\" to=\"/\">home</Link>\n        <Link className=\"nav-item\" to=\"/vaccinations\">vaccinations</Link>\n        <Link className=\"nav-item\" to=\"/antiqua\">Antiqua</Link>\n        <Link className=\"nav-item\" to=\"/solarbuddhica\">Solar Buddhica</Link>\n        <Link className=\"nav-item\" to=\"/zerpfy\">Zerpfy</Link>\n        <DatePicker\n          selected={selectedDate}\n          onChange={date => setSelectedDate(date)}\n          dateFormat='dd/MM/yyyy'\n        />\n        <div className=\"date-info\">\n          <span>showing data for</span>\n          <p>{selectedDate.toDateString()}</p>\n        </div>\n      </div>\n\n      <div className=\"main-container\">\n        <Switch>\n          <Route path=\"/vaccinations\">\n            <VaccinationTable vaccinations={filterByDate(vaccinations, selectedDate)} />\n          </Route>\n          <Route path=\"/antiqua\">\n            <VaccineTable data={filterByDate(antiqua, selectedDate)} vaccine={'Antiqua'} />\n          </Route>\n          <Route path=\"/solarbuddhica\">\n            <VaccineTable data={filterByDate(solarBuddhica, selectedDate)} vaccine={'SolarBuddhica'} />\n          </Route>\n          <Route path=\"/zerpfy\">\n            <VaccineTable data={filterByDate(zerpfy, selectedDate)} vaccine={'Zerpfy'} />\n          </Route>\n          <Route path=\"/\">\n            <Display data={data} date={selectedDate} />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />, document.getElementById('root')\n);\n"],"sourceRoot":""}